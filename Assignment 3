import pandas as pd
import numpy as np
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Note: functions and variables cannot have the same name; e.g. variable: energy & function: energy()
# Load all three files in the beginning
def load_energy():
    # Load energy file, skip header; exclude footer and unnecessary columns; rename columns
    energy = (pd.read_excel('assets/Energy Indicators.xls',skiprows=17) 
             .loc[:(244-18),['Unnamed: 1','Petajoules','Gigajoules','%']]
             .rename(columns={'Unnamed: 1':'Country', 'Petajoules':'Energy Supply',
                              'Gigajoules':'Energy Supply per Capita','%':'% Renewable'})
              # Replace missing data with NaN (done before the converting step, or '...' would also be multiplied by 1000000)
             .replace(to_replace='...', value=np.nan))
    # Convert Energy Supply to gigajoules
    energy['Energy Supply'] *=  1000000
    # Rename countries mentioned
    energy['Country'] = energy['Country'].replace({"Republic of Korea": "South Korea",
                               "United States of America": "United States",
                               "United Kingdom of Great Britain and Northern Ireland": "United Kingdom",
                               "China, Hong Kong Special Administrative Region": "Hong Kong"})
    # Remove "()" in countries
    energy['Country'] = energy['Country'].replace(to_replace=' \(.+\)',value='', regex=True)
    return energy

def load_GDP():
    # Load GDP file, skip header; drop unnecessary columns; rename column ('Country Name' -> 'Country')
    GDP = (pd.read_csv('assets/world_bank.csv',skiprows=4)
           .drop(['Indicator Name','Indicator Code','Country Code'],axis=1)
           .rename(columns={'Country Name':'Country'}))
    # Rename countries mentioned
    GDP['Country'] = GDP['Country'].replace({"Korea, Rep.": "South Korea", 
                                             "Iran, Islamic Rep.": "Iran",
                                             "Hong Kong SAR, China": "Hong Kong"})
    return GDP

def load_ScimEn():
    # Load final file
    ScimEn = pd.read_excel('assets/scimagojr-3.xlsx')
    return ScimEn
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q1
Load the energy data from the file assets/Energy Indicators.xls, which is a list of indicators of energy supply and renewable electricity production from 
the United Nations for the year 2013, and should be put into a DataFrame with the variable name of Energy.

Keep in mind that this is an Excel file, and not a comma separated values file. Also, make sure to exclude the footer and header information from the datafile. 
The first two columns are unneccessary, so you should get rid of them, and you should change the column labels so that the columns are:
['Country', 'Energy Supply', 'Energy Supply per Capita', '% Renewable]

Convert Energy Supply to gigajoules (Note: there are 1,000,000 gigajoules in a petajoule). For all countries which have missing data (e.g. data with "...") 
make sure this is reflected as np.NaN values.

Rename the following list of countries (for use in later questions):
"Republic of Korea": "South Korea",
"United States of America": "United States",
"United Kingdom of Great Britain and Northern Ireland": "United Kingdom",
"China, Hong Kong Special Administrative Region": "Hong Kong"

There are also several countries with numbers and/or parenthesis in their name. Be sure to remove these, e.g. 'Bolivia (Plurinational State of)' should be 'Bolivia'. 
'Switzerland17' should be 'Switzerland'.

Next, load the GDP data from the file assets/world_bank.csv, which is a csv containing countries' GDP from 1960 to 2015 from World Bank. Call this DataFrame GDP.

Make sure to skip the header, and rename the following list of countries:
"Korea, Rep.": "South Korea", 
"Iran, Islamic Rep.": "Iran",
"Hong Kong SAR, China": "Hong Kong"

Finally, load the Sciamgo Journal and Country Rank data for Energy Engineering and Power Technology from the file assets/scimagojr-3.xlsx, which ranks countries based on
their journal contributions in the aforementioned area. Call this DataFrame ScimEn.

Join the three datasets: GDP, Energy, and ScimEn into a new dataset (using the intersection of country names). Use only the last 10 years (2006-2015) of GDP data and 
only the top 15 countries by Scimagojr 'Rank' (Rank 1 through 15).

The index of this DataFrame should be the name of the country, and the columns should be 
['Rank', 'Documents', 'Citable documents', 'Citations', 'Self-citations', 'Citations per document', 'H index', 'Energy Supply', 'Energy Supply per Capita', '% Renewable', 
'2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015'].

This function should return a DataFrame with 20 columns and 15 entries, and the rows of the DataFrame should be sorted by "Rank".
----------------------------------------------------------------------------------------
def answer_one():
    energy, GDP, ScimEn = load_energy(), load_GDP(), load_ScimEn()
    # Merge ScimEn(Rank 1-15) with energy first
    ScimEn_energy = pd.merge(ScimEn[ScimEn['Rank'].isin(range(1,16))], energy, on='Country')

    # Merge above df with GDP(2006-2015); set 'Country' as index, drop duplicate column 'Country Name'
    yrs = [str(yr) for yr in range(2006,2016)]
    df_merge = pd.merge(ScimEn_energy, GDP[['Country']+yrs], on='Country').set_index('Country')
    
    return df_merge
    raise NotImplementedError()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q2
The previous question joined three datasets then reduced this to just the top 15 entries. When you joined the datasets, but before you reduced this to the top 15 items, 
how many entries did you lose?
This function should return a single number.
----------------------------------------------------------------------------------------
# Note: the question has specified " When you joined the datasets, BUT BEFORE you reduced this to the top 15 items, how many entries did you lose?"
# so do not need to remove any row while merging
def answer_two():
    energy, GDP, ScimEn = load_energy(), load_GDP(), load_ScimEn()
    # Inner Merge
    temp = pd.merge(ScimEn, energy, on='Country')
    df_inner = pd.merge(temp, GDP, on='Country')
    
    # Outer Merge
    temp2 = pd.merge(ScimEn, energy, how='outer', on='Country')
    df_outer = pd.merge(temp2, GDP, how='outer', on='Country')
     
    return len(df_outer) - len(df_inner)
    raise NotImplementedError()
# answer_two()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q3
What are the top 15 countries for average GDP over the last 10 years?
This function should return a Series named avgGDP with 15 countries and their average GDP sorted in descending order.
----------------------------------------------------------------------------------------
def answer_three():
    # YOUR CODE HERE
    yrs = [str(yr) for yr in range(2006,2016)]
    GDP_only = answer_one()[yrs]
    avgGDP = GDP_only.mean(axis=1).sort_values(ascending=False).rename('avgGDP')
    return avgGDP
    raise NotImplementedError()
#answer_three()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q4
By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP?
This function should return a single number.
----------------------------------------------------------------------------------------
def answer_four():
    # YOUR CODE HERE
    country = answer_three().index[5]
    return answer_one().loc[country,'2015'] - answer_one().loc[country,'2006']
    raise NotImplementedError()
# answer_four()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q5
What is the mean energy supply per capita? 
This function should return a single number.
----------------------------------------------------------------------------------------
def answer_five():
    # YOUR CODE HERE
    return answer_one()['Energy Supply per Capita'].mean()
    raise NotImplementedError()
# answer_five()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q6
What country has the maximum % Renewable and what is the percentage?
This function should return a tuple with the name of the country and the percentage.
----------------------------------------------------------------------------------------
def answer_six():
    # Sort % Renewable in a Series
    p_series = answer_one()['% Renewable'].sort_values(ascending=False)
    return (p_series.index[0], p_series[0])
    raise NotImplementedError()
# answer_six()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q7
Create a new column that is the ratio of Self-Citations to Total Citations. What is the maximum value for this new column, and what country has the highest ratio?
This function should return a tuple with the name of the country and the ratio.
----------------------------------------------------------------------------------------
def answer_seven():
    # YOUR CODE HERE
    cite_df = answer_one()[['Citations', 'Self-citations']].copy()
    cite_df['% Self-citations'] = cite_df['Self-citations'] / cite_df['Citations']
    return (cite_df['% Self-citations'].sort_values(ascending=False).index[0], cite_df['% Self-citations'].sort_values(ascending=False)[0])
    raise NotImplementedError()
# answer_seven()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q8
Create a column that estimates the population using Energy Supply and Energy Supply per capita. What is the third most populous country according to this estimate?
This function should return the name of the country
----------------------------------------------------------------------------------------
def answer_eight():
    # YOUR CODE HERE
    ppl_table = answer_one()[['Energy Supply','Energy Supply per Capita']].copy()
    ppl_table['Population'] = ppl_table['Energy Supply'] / ppl_table['Energy Supply per Capita']
    return ppl_table['Population'].sort_values(ascending=False).index[2]
    raise NotImplementedError()
# answer_eight()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q9
Create a column that estimates the number of citable documents per person. What is the correlation between the number of citable documents per capita and the energy 
supply per capita? Use the .corr() method, (Pearson's correlation).
This function should return a single number.
----------------------------------------------------------------------------------------
def answer_nine():
    # YOUR CODE HERE
    corr_df = answer_one()
    corr_df['Population'] = corr_df['Energy Supply'] / corr_df['Energy Supply per Capita']
    corr_df['Citable documents Per Capita'] = corr_df['Citable documents'] / corr_df['Population']
    corr_df = corr_df[['Citable documents Per Capita','Energy Supply per Capita']]
    return corr_df.corr(method='pearson').iloc[0,1]
    raise NotImplementedError()
# answer_nine()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q10
Create a new column with a 1 if the country's % Renewable value is at or above the median for all countries in the top 15, and a 0 if the country's % Renewable value 
is below the median.
This function should return a series named HighRenew whose index is the country name sorted in ascending order of rank.
----------------------------------------------------------------------------------------
def answer_ten():
    # YOUR CODE HERE
    top15 = answer_one()
    top15['HighRenew'] = top15['% Renewable'].apply(lambda v: 1 if v >= top15['% Renewable'].median() else 0)
    return top15['HighRenew']
    raise NotImplementedError()
#answer_ten()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q11
Use the following dictionary to group the Countries by Continent, then create a DataFrame that displays the sample size (the number of countries in each continent bin), 
and the sum, mean, and std deviation for the estimated population of each country.

ContinentDict  = {'China':'Asia', 'United States':'North America', 'Japan':'Asia', 'United Kingdom':'Europe', 'Russian Federation':'Europe', 'Canada':'North America', 
                  'Germany':'Europe', 'India':'Asia', 'France':'Europe', 'South Korea':'Asia', 'Italy':'Europe', 'Spain':'Europe', 'Iran':'Asia','Australia':'Australia', 
                  'Brazil':'South America'}
This function should return a DataFrame with index named Continent ['Asia', 'Australia', 'Europe', 'North America', 'South America'] and columns ['size', 'sum', 'mean', 'std']
----------------------------------------------------------------------------------------
def answer_eleven():
    # YOUR CODE HERE
    ContinentDict  = {'China':'Asia', 'United States':'North America', 'Japan':'Asia', 'United Kingdom':'Europe', 
                      'Russian Federation':'Europe', 'Canada':'North America', 'Germany':'Europe', 'India':'Asia',
                      'France':'Europe', 'South Korea':'Asia', 'Italy':'Europe', 'Spain':'Europe', 'Iran':'Asia',
                      'Australia':'Australia', 'Brazil':'South America'}
    top15 = answer_one()
    top15['Population'] = top15['Energy Supply'] / top15['Energy Supply per Capita']
    top15['Continent'] = top15.index.map(ContinentDict)
    
    # Note: If there's no column selected (i.e. ['Population']) after groupby function, the result will become multiindex (level 0 - Population, level 1 - size,sum,...)
    # Solution: Group your dataframe by Continent, select the population estimate column, and use agg method on it and pass list of functions that you'll perform.
    # ref: https://www.coursera.org/learn/python-data-analysis/discussions/weeks/3/threads/t1uMKTLtEeuv2w6raM0B0w/replies/9cJmczLwEeuv2w6raM0B0w    
    return top15.groupby('Continent')['Population'].agg(['size', 'sum', 'mean', 'std'])
    
    raise NotImplementedError()
# answer_eleven()
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q12
Cut % Renewable into 5 bins. Group Top15 by the Continent, as well as these new % Renewable bins. How many countries are in each of these groups?
This function should return a Series with a MultiIndex of Continent, then the bins for % Renewable. Do not include groups with no countries.
----------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Q13
Convert the Population Estimate series to a string with thousands separator (using commas). Use all significant digits (do not round the results).
e.g. 12345678.90 -> 12,345,678.90
This function should return a series PopEst whose index is the country name and whose values are the population estimate string
----------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
